* Commandments, Rules, and Laws

** First-Class
*** The Ten Commandments

 * The First Commandment

   When recurring on a list of atoms, /lat/, ask two questions about it: ~(null?
   lat)~ and *else*.

   When recurring on a number, /n/, ask two questions about
   it: ~(zero? n)~ and *else*.

   When recurring on a list of S-expressions, /l/, ask three questions about it:
   ~(null? l)~, ~(atom? (car l))~, and *else*.

 * The Second Commandment

   Use ~cons~ to build lists.

 * The Third Commandment

   When building a list, describe the first typical element, and then ~cons~ it
   onto the natural recursion.

 * The Fourth Commandment

   Always change at least one argument while recurring. When recurring on a list
   of atoms, /lat/, use ~(cdr lat)~. When recurring on a number, /n/, use ~(sub1
   n)~. And when recurring on a list of S-expressions, /l/, use ~(car l)~ and
   ~(cdr l)~ if neither ~(null? l)~ nor ~(atom? (car l))~ are true.

   It must be changed to be closer to the termination. The changing argument
   must be tested in the termination condition:
   + when using /cdr/, test termination with ~null?~ and

   + when using /sub1/, test termination with ~zero?~.

 * The Fifth Commandment

   When building a value with +, always use 0 for the value of the terminating
   line, for adding 0 does not change the value of an addition.

   When building a value with \times, always use 1 for the value of the
   terminating line, for multiplying 1 does not change the value of an
   multiplication.

   when building a value with /cons/, always consider ~()~ for the value of the
   terminating line.

 * The Sixth Commandment

   Simplify only after the function is correct.

 * The Seventh Commandment

   Recur on the /subparts/ that are of the same nature:
   + On the sublists of a list.

   + On the subexpressions of an arithmetic expression.

 * The Eighth Commandment

   Use help functions to abstract from representations.

 * The Ninth Commandment

   Abstract common patterns with a new function.

 * The Tenth Commandment

   Build functions to collect more than one value at a time.

*** The Five Rules

 * The Law of Car

   The primitive /car/ is defined only for non-empty lists.

 * The Law of Cdr

   The primitive /cdr/ is defined only for non-empty lists. The /cdr/ of any
   non-empty list is always another list.

 * The Law of Cons

   The primitive /cons/ takes two arguments.

   The second argument to /cons/ must be a list.

   The result is a list.

 * The Law of Null?

   The primitive /null?/ is defined only for lists.

 * The Law of Eq?

   The primitive /eq?/ takes two arguments.

   Each must be an non-numeric atom.

** Else

*** Diff from Spacemacs+Geiser+Chez

1. ~atom?~

   The default operation ~atom?~ DO NOT behave as expected by the book.

   One needs to define a new ~atom?~ function which has been described in the
   /Preface/.

   #+BEGIN_SRC scheme
     (define atom?
       (lambda (x)
         (and (not (pair? x)) (not (null? x)))))
   #+END_SRC

   Also, one can define ~atom?~ in Lisp:

   #+BEGIN_SRC elisp
     (defun atom? (x)
       (not (listp x)))
   #+END_SRC

2. /car/ an empty list ()? (also for /cdr/)

   + *book*: No Answer.

   + *segc*: Exception in car.

   + *elisp*: /nil/.

3. /car/ an atom? (also for /cdr/)

   + *book*: No Answer.

   + *segc*: Exception in car.

   + *elisp*: Error.

4. /cons/

   + when the second argument is an atom.

     - *book*: No Answer.

     - *segc*: give a /pair/ ~( . )~.

     - *elisp*: same as *segc*.

   + when arguments are two values.

     - *book*: works in practice. can operated by /car/ and /cdr/.

     - *segc*: a pair.

     - *elisp*: a pair.

5. /null?/ in *book* and *segc*; but /null/ in *elisp*.

6. /eq?/ in *books* and *segc*; but /eq/ in *elisp*.

*** Notes

1. wanna refer to an /atom/ or a /list/? Use *quote*:

   1. ~(quote )~

   2. or a single quote prefix ~​'()~.

   3. *elisp*: for list: ~(quote ())~ ~​'()~ ~()~.

2. in practice, ~(null? α)~ is false for everything except the empty list.

3. in practice, /eq?/ maybe apply to two non-atom arguments. It can be used to
   compare two lists or two numbers (only intergers?).

4. ~(or ..)~ ask two questions, one at a time. If the first one is true it stops
   and answers true just like other programming languages.

5. the history or meanings of /car/, /cdr/, /cond/, and /cons/.

   1. *car*: *C*ontents of the *A*ddress part of *R*egister number.

   2. *cdr*: *C*ontents of the *D*ecrement part of *R*egister number.

   3. *cond*: *cond*itions.

   4. *cons*: *cons*tructs.
